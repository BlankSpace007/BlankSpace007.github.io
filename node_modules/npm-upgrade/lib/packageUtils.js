'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;
exports.findModuleDepsGroup = findModuleDepsGroup;
exports.getModuleVersion = getModuleVersion;
exports.setModuleVersion = setModuleVersion;
exports.getModuleHomepage = getModuleHomepage;
exports.getModuleInfo = getModuleInfo;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _npm = require('npm');

var _npm2 = _interopRequireDefault(_npm);

var DEPS_GROUPS = ['dependencies', 'devDependencies', 'optionalDependencies'];

function findModuleDepsGroup(moduleName, packageJson) {
    for (var _iterator = DEPS_GROUPS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var group = _ref;

        var modules = packageJson[group];

        if (modules && modules[moduleName]) {
            return modules;
        }
    }

    return null;
}

function getModuleVersion(moduleName, packageJson) {
    var depsGroup = findModuleDepsGroup(moduleName, packageJson);

    return depsGroup ? depsGroup[moduleName] : null;
}

function setModuleVersion(moduleName, newVersion, packageJson) {
    var depsGroup = findModuleDepsGroup(moduleName, packageJson);

    if (depsGroup) {
        depsGroup[moduleName] = newVersion;
        return true;
    } else {
        return false;
    }
}

function getModuleHomepage(packageJson) {
    return packageJson.changelog || packageJson.homepage || packageJson.url || null;
}

function getModuleInfo(moduleName) {
    return _regeneratorRuntime.async(function getModuleInfo$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                return context$1$0.abrupt('return', new _Promise(function (resolve, reject) {
                    try {
                        _npm2['default'].commands.view([moduleName], true, function (err, moduleInfo) {
                            if (err) {
                                reject(err);
                            } else {
                                // `moduleInfo` contains object `{ <version>: <info> }`, so we should extract info from there
                                resolve(_lodash2['default'].values(moduleInfo)[0]);
                            }
                        });
                    } catch (err) {
                        reject(err);
                    }
                }));

            case 1:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

// This function is only supposed to run after `npm-check-updates`, so we don't need to call `npm.load()` here