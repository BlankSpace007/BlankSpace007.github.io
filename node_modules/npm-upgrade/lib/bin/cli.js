#! /usr/bin/env node
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chalk = require('chalk');

var _opener = require('opener');

var _opener2 = _interopRequireDefault(_opener);

var _npmCheckUpdates = require('npm-check-updates');

var _npmCheckUpdates2 = _interopRequireDefault(_npmCheckUpdates);

var _npmCheckUpdatesLibVersionUtil = require('npm-check-updates/lib/version-util');

var _packageUtils = require('../packageUtils');

var _cliTable = require('../cliTable');

var _askUser = require('../askUser');

var _askUser2 = _interopRequireDefault(_askUser);

var strong = _chalk.white.bold;

(function main() {
    var packageFile, packageJson, updatedModules, updatedTable, packageUpdated, outdatedModule, _name, from, to, homepage, isHomepageChecked, _ref2, answer, _ref3, shouldUpdatePackageFile;

    return _regeneratorRuntime.async(function main$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                packageFile = _path2['default'].resolve(process.argv[2] || './package.json');
                packageJson = require(packageFile);

                console.log('Checking for outdated modules for "' + strong(packageFile) + '"...');
                context$1$0.next = 5;
                return _regeneratorRuntime.awrap(_npmCheckUpdates2['default'].run({ packageFile: packageFile }));

            case 5:
                updatedModules = context$1$0.sent;

                if (!_lodash2['default'].isEmpty(updatedModules)) {
                    context$1$0.next = 8;
                    break;
                }

                return context$1$0.abrupt('return', console.log('All dependencies are up-to-date!'));

            case 8:

                // Making array of outdated modules
                updatedModules = _lodash2['default'].map(updatedModules, function (newVersion, moduleName) {
                    return {
                        name: moduleName,
                        from: _packageUtils.getModuleVersion(moduleName, packageJson),
                        to: newVersion
                    };
                });

                // Creating pretty-printed CLI table with update info
                updatedTable = _cliTable.createSimpleTable(_lodash2['default'].map(updatedModules, function (_ref) {
                    var name = _ref.name;
                    var from = _ref.from;
                    var to = _ref.to;
                    return [strong(name), from, 'â†’', _npmCheckUpdatesLibVersionUtil.colorizeDiff(to, from)];
                }), {
                    style: { 'padding-left': 2 },
                    colAligns: ['left', 'right', 'right', 'right']
                });

                console.log('\nNew versions of modules available:\n\n' + updatedTable);

                packageUpdated = false;

            case 12:
                outdatedModule = updatedModules.shift();
                _name = outdatedModule.name;
                from = outdatedModule.from;
                to = outdatedModule.to;
                homepage = outdatedModule.homepage;
                isHomepageChecked = homepage !== undefined;

                console.log('');
                context$1$0.next = 21;
                return _regeneratorRuntime.awrap(_askUser2['default']([{
                    type: 'list',
                    name: _name,
                    message: (isHomepageChecked ? 'So, u' : 'U') + 'pdate "' + _name + '" in package.json from ' + from + ' to ' + _npmCheckUpdatesLibVersionUtil.colorizeDiff(to, from) + '?',
                    choices: _lodash2['default'].compact([{ name: 'Yes', value: true }, { name: 'No', value: false },
                    // Don't show this option if we haven't found info about homepage in module's package.json
                    homepage !== null && { name: 'Open homepage or changelog', value: 'homepage' }]),
                    'default': 0
                }]));

            case 21:
                _ref2 = context$1$0.sent;
                answer = _ref2[_name];

                if (!(answer === 'homepage')) {
                    context$1$0.next = 34;
                    break;
                }

                // Ask user about this module again
                updatedModules.unshift(outdatedModule);

                if (isHomepageChecked) {
                    context$1$0.next = 31;
                    break;
                }

                console.log('Trying to find homepage or changelog URL...');
                context$1$0.next = 29;
                return _regeneratorRuntime.awrap(_packageUtils.getModuleInfo(_name));

            case 29:
                context$1$0.t0 = context$1$0.sent;
                homepage = outdatedModule.homepage = _packageUtils.getModuleHomepage(context$1$0.t0);

            case 31:

                if (homepage) {
                    console.log('Opening ' + strong(homepage) + '...');
                    _opener2['default'](homepage);
                } else {
                    console.log('Sorry, there is no info about homepage or changelog URL in the ' + strong(_name) + '\'s package.json');
                }
                context$1$0.next = 35;
                break;

            case 34:
                if (answer === true) {
                    packageUpdated = true;
                    _packageUtils.setModuleVersion(_name, to, packageJson);
                }

            case 35:
                if (updatedModules.length) {
                    context$1$0.next = 12;
                    break;
                }

            case 36:

                // Adds new line
                console.log('');

                if (!packageUpdated) {
                    context$1$0.next = 47;
                    break;
                }

                packageJson = JSON.stringify(packageJson, null, 2);
                console.log('New package.json:\n\n' + packageJson + '\n');
                context$1$0.next = 42;
                return _regeneratorRuntime.awrap(_askUser2['default']([{ type: 'confirm', name: 'shouldUpdatePackageFile', message: 'Update package.json?', 'default': true }]));

            case 42:
                _ref3 = context$1$0.sent;
                shouldUpdatePackageFile = _ref3.shouldUpdatePackageFile;

                if (shouldUpdatePackageFile) {
                    // Adding newline to the end of file
                    _fs2['default'].writeFileSync(packageFile, packageJson + '\n');
                }
                context$1$0.next = 48;
                break;

            case 47:
                console.log('Nothing to update');

            case 48:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
})()['catch'](function (err) {
    console.error(err.message);
    process.exit(1);
});